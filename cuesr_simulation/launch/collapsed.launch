<launch>
  <!-- gazebo configs -->
  <arg name="gui" default="true"/>
  <arg name="debug" default="false"/>
  <arg name="verbose" default="true"/>
  <arg name="paused" default="false"/>
  <arg name="interactive" default="false"/>
  <arg name="world" default="$(find auav_2022_sample)/worlds/collapsed.world"/>
  <param name="use_sim_time" value="true" />

  <!-- Launch rqt_reconfigure -->
  <node pkg="rqt_reconfigure" type="rqt_reconfigure" output="log" name="rqt_reconfigure" />

  <!--gazebo-->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="gui" value="$(arg gui)"/>
      <arg name="world_name" value="$(arg world)"/>
      <arg name="debug" value="$(arg debug)"/>
      <arg name="verbose" value="$(arg verbose)"/>
      <arg name="paused" value="$(arg paused)"/>
      <arg name="respawn_gazebo" value="false"/>
  </include>

  <!-- rviz -->
  <node name="rviz" pkg="rviz" type="rviz" output="log" args="-d $(find auav_2022_sample)/config/local_planner.rviz" />

  <!-- start drone  -->
  <group ns="drone" clear_params="true">

    <!--spawn vehicle model in gazebo-->
    <node name="drone_spawn" pkg="gazebo_ros" type="spawn_model" output="log"
      args="-sdf -file $(find auav_2022_sample)/models/sample_drone/sample_drone.sdf -model drone -x 0 -y 2 -z .25 -R 0 -P 0 -Y 1.5"/>

    <!--px4 software in the loop-->
    <env name="PX4_SIM_MODEL" value="iris" />
    <env name="PX4_ESTIMATOR" value="ekf2" />
    <node name="sitl" pkg="px4" type="px4" output="log" launch-prefix="xterm -e"
      args="$(find px4)/../../../build/px4/etc -s etc/init.d-posix/rcS" required="true"/>

    <!-- mavros -->
    <include file="$(find mavros)/launch/node.launch">
      <arg name="pluginlists_yaml" value="$(find auav_2022_sample)/launch/px4_pluginlists.yaml" />
      <arg name="config_yaml" value="$(find auav_2022_sample)/launch/px4_config.yaml" />
      <arg name="fcu_url" value="udp://:14540@localhost:14557"/>
      <!-- GCS link is provided by SITL -->
      <arg name="gcs_url" value="" />
      <arg name="tgt_system" value="1" />
      <arg name="tgt_component" value="1" />
      <arg name="log_output" value="log" />
      <arg name="fcu_protocol" value="v2.0" />
      <arg name="respawn_mavros" default="false" />
    </include>

    <!-- Launch local planner -->
    <node pkg="tf" type="static_transform_publisher" name="tf_fcu_link_camera"
      args="0 0 0 -1.57 0 -1.57 fcu camera_link 10"/>
    <!--<node pkg="tf2_ros" type="static_transform_publisher" name="tf_local_origin_map"-->
      <!--args="0 0 0 0 0 0 local_origin map"/>-->
    <node pkg="tf2_ros" type="static_transform_publisher" name="tf_fcu_base_link"
      args="0 0 0 0 0 0 fcu base_link"/>

    <!-- We sleep 15 seconds beforefore starting avoidance to make sure mavros is running, this prevents error messages while it is waiting-->
    <node pkg="nodelet" type="nodelet" name="local_planner" args="standalone LocalPlannerNodelet" output="log" launch-prefix="bash -c 'sleep 15; $0 $@' ">
      <remap from="move_base_simple/goal" to="/move_base_simple/goal"/>
      <param name="goal_x_param" value="5" />
      <param name="goal_y_param" value="0"/>
      <param name="goal_z_param" value="2" />
      <rosparam param="pointcloud_topics">[camera/depth/points]</rosparam>
      <!--<param name="world_name" value="$(find avoidance)/sim/worlds/$(arg world_file_name).yaml" />-->
    </node>
    <include file="$(find rtabmap_ros)/launch/rtabmap.launch">
      <arg name="args" default="--delete_db_on_start"/>
      <arg name="gdb" default="false"/>
      <arg name="odom_topic" default="/drone/odom_fix"/>
      <arg name="rgb_topic" default="/drone/camera/rgb/image_raw"/>
      <arg name="launch_prefix" default="bash -c 'sleep 5; $0 $@' "/>
      <!--<arg name="rgb_topic" default="/drone/camera/rgb/image_rect_color"/>-->
      <!--<arg name="depth_topic" default="/drone/camera/depth_registered/image_raw"/>-->
      <arg name="visual_odometry" default="false"/>
      <arg name="depth_topic" default="/drone/camera/depth/image_raw"/>
      <arg name="camera_info_topic" default="/drone/camera/rgb/camera_info"/>
      <arg name="depth_camera_info_topic" default="/drone/camera/rgb/camera_info"/>
    </include>
    <node name="odom_fix" pkg="auav_2022_sample" type="odom_fix.py"/>

  </group>

</launch>

<!-- vim set ft=xml ts=2 sw=2 et: -->
