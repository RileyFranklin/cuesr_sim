<launch>
  <!--px4 environment variables-->
  <env name="PX4_SIM_SPEED_FACTOR" value="1"/>
  <arg name="with_fbet" default="false"/>
  <!--use cam_deg to set your camera angle
    also set camera angle for your drone in the world.jinja file
    pitch angle 0 horizontal, 30 (30 degree pitch down)
   -->
  <arg name="cam_deg" default="0"/>

  <!-- gazebo configs -->
  <arg name="gui" default="true"/>
  <arg name="debug" default="false"/>
  <arg name="verbose" default="true"/>
  <arg name="paused" default="false"/>
  <arg name="interactive" default="false"/>
  <arg name="world" default="$(find auav_2022_sample)/worlds/trial_1.world"/>
  <arg name="lockstep" default="true"/>

  <!--referee to compute score -->
  <node name="referee" pkg="auav_2022_sample" type="referee.py" output="log">
    <remap from="drone_ready" to="drone/ready"/>
    <remap from="rover_finished" to="rover/finished"/>
    <remap from="rover" to="/qualisys/rover/odom"/>
    <remap from="drone" to="/qualisys/drone/odom"/>
  </node>

  <!-- Launch rqt_reconfigure -->
  <!--<node pkg="rqt_reconfigure" type="rqt_reconfigure" output="log" name="rqt_reconfigure" />-->

  <!--gazebo-->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="gui" value="$(arg gui)"/>
      <arg name="world_name" value="$(arg world)"/>
      <arg name="debug" value="$(arg debug)"/>
      <arg name="verbose" value="$(arg verbose)"/>
      <arg name="paused" value="$(arg paused)"/>
      <arg name="respawn_gazebo" value="false"/>
      <arg unless="$(arg lockstep)" name="extra_gazebo_args" value=""/>
      <arg     if="$(arg lockstep)" name="extra_gazebo_args" value="--lockstep"/>
  </include>

  <!-- rviz -->
  <node name="rviz" pkg="rviz" type="rviz" output="log" args="-d $(find auav_2022_sample)/config/local_planner.rviz" />

  <!-- start distration rover  -->
  <group ns="axial_scx10" clear_params="true">

    <!--keyboard rover control-->
    <node name="rover_teleop" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" output="screen" launch-prefix="xterm -e">
      <remap from='cmd_vel' to='/axial_scx10/cmd_vel'/>
    </node>

  </group>


  <!-- start rover  -->
  <group ns="rover" clear_params="true">

    <!--qualiysis -->
    <node name="odom_to_tf" pkg="auav_2022_sample" type="odom_to_tf.py" output="log">
      <remap from="odom" to="/qualisys/rover/odom"/>
      <param name="child_frame_override" value="rover"/>
    </node>

    <!--scripted rover control-->
    <node name="skidsteer_controller" pkg="auav_2022_sample" type="skidsteer_controller.py" output="screen">
      <param name="vehicle_frame" value="rover"/>
      <param name="map_frame" value="map"/>
      <param name="mode" value="reference"/>
      <param name="delay" value="5"/>
      <param name="v_max" value="0.2"/>
      <param name="omega_max" value="0.3"/>
      <remap from="ready" to="/drone/ready"/>
    </node>
  </group>

  <!-- start drone  -->
  <group ns="drone" clear_params="true">

    <arg name="cam_rad" default="$(eval -1.5708 - cam_deg*3.1416/180)"/>

    <!--topic relay for mocap-->
    <node pkg="topic_tools" type="relay" name="relay" output="log" args="/qualisys/drone/odom /drone/mavros/odometry/out"/>

    <!-- tf frames -->
    <node name="tf_odom_map" pkg="tf2_ros" type="static_transform_publisher"
      args="0 0 0 0 0 0 map odom "/>
    <node name="tf_base_link_camera" pkg="tf2_ros" type="static_transform_publisher"
      args="0 0 0 -1.57 0 $(arg cam_rad) base_link camera_link"/>

    <!--qualiysis -->
    <node name="odom_to_tf" pkg="auav_2022_sample" type="odom_to_tf.py" output="log">
      <remap from="odom" to="/qualisys/drone/odom"/>
      <param name="child_frame_override" value="drone"/>
    </node>

    <!--px4 environment variables-->
    <env name="PX4_HOME_LAT" value="40.41536" />
    <env name="PX4_HOME_LON" value="-86.93288" />
    <env name="PX4_HOME_ALT" value="182" />
    <env name="PX4_SIM_MODEL" value="iris" />
    <env name="PX4_ESTIMATOR" value="ekf2" />
   
    <!--px4 software in the loop-->
   <node name="sitl" pkg="px4" type="px4" output="screen" launch-prefix="xterm -e"
      args="$(find px4)/../../../build/px4/etc -s etc/init.d-posix/rcS" required="true"/>

    <!-- mavros -->
    <node pkg="mavros" type="mavros_node" name="mavros" required="true" clear_params="true" output="log">
      <param name="fcu_url" value="udp://:14540@localhost:14557" />
      <param name="gcs_url" value="" />
      <param name="target_system_id" value="1" />
      <param name="target_component_id" value="1" />
      <param name="fcu_protocol" value="v2.0" />
      <!-- load blacklist, config -->
      <rosparam command="load" file="$(find auav_2022_sample)/launch/px4_pluginlists.yaml" />
      <rosparam command="load" file="$(find auav_2022_sample)/launch/px4_config.yaml" />
    </node>

    <!-- Launch local planner -->
    <!-- We sleep 15 seconds before starting avoidance to make sure mavros is running, this prevents error messages while it is waiting-->
    <!--<node pkg="nodelet" type="nodelet" name="local_planner" args="standalone LocalPlannerNodelet" output="log" launch-prefix="bash -c 'sleep 10; $0 $@' ">-->
      <!--<remap from="move_base_simple/goal" to="/move_base_simple/goal"/>-->
      <!--<param name="goal_x_param" value="5" />-->
      <!--<param name="goal_y_param" value="0"/>-->
      <!--<param name="goal_z_param" value="2" />-->
      <!--<param name="tree_node_distance_" value="0.5" />-->
      <!--<rosparam param="pointcloud_topics">[camera/depth/points]</rosparam>-->
    <!--</node>-->

    <!-- Launch offboard node -->
    <node name="offboard_node" pkg="auav_2022_sample" type="offboard.py" output="screen" launch-prefix="xterm -T 'offboard' -e">
      <remap from="rover_finished" to="rover/finished"/>
    </node>

    <!-- Frontier based exploration -->
    <group if="$(arg with_fbet)">
      <node name="fbet" pkg="fbet" type="fbet_node">
        <remap from="cloud_in" to="camera/depth/points"/>
      </node>
    </group>

    <!-- Launch path_planning node -->
    <!--<node name="path_planning" pkg="path_planning" type="path_planning_node" output="log"/>-->

    <!-- Launch object tracking node -->
    <node name="color_tracking" pkg="auav_2022_sample" type="color_tracking.py" output="log"/>
    <node name="roi_to_point" pkg="auav_2022_sample" type="roi_to_point.py" output="log"/>

    <node pkg="octomap_server" type="octomap_server_node" name="octomap_server" output="log" launch-prefix="bash -c 'sleep 20; $0 $@'">
      <param name="base_frame_id" value="base_link"/>
      <remap from="cloud_in" to="camera/depth/points"/>
      <param name="resolution" value="0.2"/>
      <param name="frame_id" type="string" value="map"/>
      <param name="sensor_model/max_range" value="10.0"/>

      <!--Ground Filter-->
      <!--<param name="filter_ground" value="true"/>-->
      <!--<param name="ground_filter/distance" value="0.3"/>-->

      <!--Alternative is to cut points without using filter if cpu low-->
      <param name="pointcloud_min_z" value="0.4"/>
      <param name="pointcloud_max_z" value="3.0"/>
    </node>

  </group>

</launch>

<!-- vim set ft=xml ts=2 sw=2 et: -->
